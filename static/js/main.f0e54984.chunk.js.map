{"version":3,"sources":["components/Animation.js","visualizer/Visualizer.js","Main.js","App.js","reportWebVitals.js","index.js"],"names":["animation","inputArr","populateAnimationArray","outputChanges","arr","pairArray","arrayStates","elementArray","slice","count","n","length","i","min","j","tmp","selectionSetFrames","array","frameArray","frames","calculateFrames","returner","selectionSortCount","Visualizer","props","resetFrameNumber","setState","frameNumber","resetAll","resetArraySize","resetArray","resetSort","resetFrames","frameRoll","state","arraySize","toSort","max","push","Math","floor","random","handleClick","decide","newIntervalId","setInterval","prevState","intervalId","bind","handleChange","handleDragStop","handleGenerate","console","log","this","clearInterval","valueList","individualFrame","renderList","event","value","nextState","update","arrSize","className","Box","sx","width","height","Stack","spacing","direction","map","idx","borderRadius","backgroundColor","opacity","Button","variant","onClick","Slider","defaultValue","step","marks","valueLabelDisplay","onChange","onDragStop","onChangeCommited","React","Component","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0e54984.chunk.js","sourcesContent":["export const animation = (inputArr) => {\r\n  let frames = populateAnimationArray(inputArr);\r\n  //[false,false,false, true, false, true],[false,false,false, true, false, true], etc etc etc\r\n  //each index corresponds to a boolean value that decides whether or not an element is colored\r\n  // console.log(frames);\r\n  let outputChanges = selectionSetFrames(inputArr);\r\n\r\n  // console.log(outputChanges);\r\n\r\n  return outputChanges;\r\n  // let marker1 = 0;\r\n  // let marker2 = 0;\r\n\r\n  // let n = inputArr.length;\r\n  // for (let i = 0; i < n; i++) {\r\n  //   // Finding the smallest number in the subarray\r\n\r\n  //   let min = i;\r\n  //   for (let j = i + 1; j < n; j++) {\r\n  //     if (inputArr[j] < inputArr[min]) {\r\n  //       min = j;\r\n  //     }\r\n  //   }\r\n  //   if (min !== i) {\r\n  //     // Swapping the elements\r\n  //     let tmp = inputArr[i];\r\n  //     inputArr[i] = inputArr[min];\r\n  //     inputArr[min] = tmp;\r\n  //   }\r\n  // }\r\n};\r\n\r\nexport const populateAnimationArray = (array) => {\r\n  let frameArray = [];\r\n  let elementArray = [];\r\n  let pairArray = [];\r\n  let frames = calculateFrames(array);\r\n\r\n  let n = array.length;\r\n\r\n  // for (let i = 0; i < array.length; i++) {\r\n  //   elementArray[i] = false;\r\n  // }\r\n\r\n  // for (let i = 0; i < frames; i++) {\r\n  //   frameArray[i] = elementArray;\r\n  // }\r\n\r\n  // for (let i = 0; i < n; i++) {\r\n  //   pairArray[0] = false;\r\n  //   pairArray[1] = array[i];\r\n  //   elementArray[i] = pairArray;\r\n\r\n  // }\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    pairArray[0] = false;\r\n    pairArray[1] = array[i];\r\n    elementArray[i] = pairArray.slice();\r\n  }\r\n  for (let i = 0; i < frames; i++) {\r\n    frameArray[i] = elementArray;\r\n  }\r\n\r\n  return frameArray;\r\n};\r\n\r\nexport const calculateFrames = (inputArr) => {\r\n  let returner = selectionSortCount(inputArr);\r\n\r\n  // let n = array.length;\r\n\r\n  // let steps = 0;\r\n  // for (let i = 1; i <= n; i++) {\r\n  //   steps += n - i;\r\n  // }\r\n\r\n  return returner;\r\n};\r\n\r\nfunction selectionSetFrames(arr) {\r\n  let pairArray = [];\r\n  let arrayStates = [];\r\n  let elementArray = [];\r\n  //^ an array that keeps track of every change in state of the elements (the order of the elements basically)\r\n\r\n  let inputArr = arr.slice();\r\n  let count = 0;\r\n  let n = inputArr.length;\r\n\r\n  elementArray = inputArr.slice();\r\n\r\n  for (let i = 0; i < inputArr.length; i++) {\r\n    pairArray[0] = false;\r\n    pairArray[1] = inputArr[i];\r\n    elementArray[i] = pairArray.slice();\r\n  }\r\n\r\n  arrayStates[count] = elementArray.slice();\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    // Finding the smallest number in the subarray\r\n\r\n    // count += 1;\r\n\r\n    elementArray = inputArr.slice();\r\n\r\n    for (let i = 0; i < inputArr.length; i++) {\r\n      pairArray[0] = false;\r\n      pairArray[1] = inputArr[i];\r\n      elementArray[i] = pairArray.slice();\r\n    }\r\n\r\n    arrayStates[count] = elementArray.slice();\r\n\r\n    let min = i;\r\n    for (let j = i + 1; j < n; j++) {\r\n      // count += 1;\r\n\r\n      elementArray = inputArr.slice();\r\n\r\n      for (let i = 0; i < inputArr.length; i++) {\r\n        pairArray[0] = false;\r\n        pairArray[1] = inputArr[i];\r\n        elementArray[i] = pairArray.slice();\r\n      }\r\n\r\n      arrayStates[count] = elementArray.slice();\r\n\r\n      if (inputArr[j] < inputArr[min]) {\r\n        min = j;\r\n\r\n        count += 1;\r\n\r\n        elementArray = inputArr.slice();\r\n\r\n        for (let i = 0; i < inputArr.length; i++) {\r\n          pairArray[0] = false;\r\n          pairArray[1] = inputArr[i];\r\n          elementArray[i] = pairArray.slice();\r\n        }\r\n\r\n        arrayStates[count] = elementArray.slice();\r\n      }\r\n    }\r\n    if (min !== i) {\r\n      // Swapping the elements\r\n      let tmp = inputArr[i];\r\n      inputArr[i] = inputArr[min];\r\n      inputArr[min] = tmp;\r\n\r\n      count += 1;\r\n\r\n      elementArray = inputArr.slice();\r\n\r\n      for (let i = 0; i < inputArr.length; i++) {\r\n        pairArray[0] = false;\r\n        pairArray[1] = inputArr[i];\r\n        elementArray[i] = pairArray.slice();\r\n      }\r\n\r\n      arrayStates[count] = elementArray.slice();\r\n    }\r\n  }\r\n  return arrayStates;\r\n}\r\n\r\nfunction boolMarker() {}\r\n\r\nfunction selectionSortCount(arr) {\r\n  let inputArr = arr.slice();\r\n  let count = 0;\r\n  let n = inputArr.length;\r\n  for (let i = 0; i < n; i++) {\r\n    // Finding the smallest number in the subarray\r\n\r\n    count += 1;\r\n\r\n    let min = i;\r\n    for (let j = i + 1; j < n; j++) {\r\n      count += 1;\r\n\r\n      if (inputArr[j] < inputArr[min]) {\r\n        min = j;\r\n\r\n        count += 1;\r\n      }\r\n    }\r\n    if (min !== i) {\r\n      // Swapping the elements\r\n      let tmp = inputArr[i];\r\n      inputArr[i] = inputArr[min];\r\n      inputArr[min] = tmp;\r\n\r\n      count += 1;\r\n    }\r\n  }\r\n  return count;\r\n}\r\n\r\nfunction merge(left, right) {\r\n  let arr = [];\r\n  // Break out of loop if any one of the array gets empty\r\n  while (left.length && right.length) {\r\n    // Pick the smaller among the smallest element of left and right sub arrays\r\n    if (left[0] < right[0]) {\r\n      arr.push(left.shift());\r\n    } else {\r\n      arr.push(right.shift());\r\n    }\r\n  }\r\n\r\n  // Concatenating the leftover elements\r\n  // (in case we didn't go through the entire left or right array)\r\n  return [...arr, ...left, ...right];\r\n}\r\nfunction mergeSort(array) {\r\n  const half = array.length / 2;\r\n\r\n  // Base case or terminating case\r\n  if (array.length < 2) {\r\n    return array;\r\n  }\r\n\r\n  const left = array.splice(0, half);\r\n  return merge(mergeSort(left), mergeSort(array));\r\n}\r\n","import React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Button from \"@mui/material/Button\";\r\nimport \"./Visualizer.css\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { animation } from \"../components/Animation\";\r\nimport { ReactDOM } from \"react\";\r\n\r\nexport default class Visualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n      toSort: false,\r\n      arraySize: 72,\r\n      frames: [],\r\n      frameNumber: 0,\r\n      intervalId: 0,\r\n    };\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleDragStop = this.handleDragStop.bind(this);\r\n    this.handleGenerate = this.handleGenerate.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"restarted\");\r\n    this.resetArray();\r\n    this.resetSort();\r\n    this.resetArraySize();\r\n    this.resetFrames();\r\n    // this.interval = setInterval(() => this.tick(), 300);\r\n  }\r\n\r\n  resetFrameNumber = () => {\r\n    this.setState({ frameNumber: 0 });\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.newIntervalId);\r\n  }\r\n  // resetFrameNumber = () => {\r\n  //   this.setState({ frameNumber: 0 });\r\n  // };\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    let frameRoll = animation(state.array);\r\n    const { frames } = frameRoll;\r\n    let frameVal = state.frameNumber + 1;\r\n    // const { frameNumber } = frameVal;\r\n    // console.log(frameRoll);\r\n\r\n    return { frames };\r\n  }\r\n\r\n  resetAll = () => {\r\n    this.resetArraySize();\r\n    this.resetArray();\r\n    this.resetSort();\r\n    this.resetFrames();\r\n    this.resetFrameNumber();\r\n  };\r\n\r\n  resetFrames = () => {\r\n    let frameRoll = animation(this.state.array);\r\n    this.setState({ frames: frameRoll });\r\n    // console.log(\"reset\");\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    let arrSize = this.state.arraySize;\r\n    let array = [];\r\n    let frames = animation(this.state.array);\r\n    let valueList = [];\r\n    let individualFrame = [];\r\n    let renderList = [];\r\n    let Frames = [];\r\n\r\n    for (let i = 0; i < frames.length; i++) {\r\n      Frames = frames.slice();\r\n      individualFrame = Frames[i];\r\n\r\n      for (let j = 0; j < individualFrame.length; j++) {\r\n        valueList[j] = individualFrame[j][1];\r\n      }\r\n      renderList[i] = valueList.slice();\r\n    }\r\n\r\n    if (this.state.frameNumber === renderList.length) {\r\n      this.resetAll();\r\n    }\r\n\r\n    // console.log(\"updated\");\r\n    // console.log(this.state.frameNumber);\r\n    // console.log(renderList.length);\r\n  }\r\n\r\n  resetArraySize = () => {\r\n    this.setState({ arraySize: 72 });\r\n  };\r\n\r\n  resetSort = () => {\r\n    this.setState({ toSort: false });\r\n  };\r\n\r\n  resetArray = () => {\r\n    const array = [];\r\n\r\n    for (let i = 0; i < this.state.arraySize; i++) {\r\n      array.push(randomIntFromInterval(5, 600));\r\n    }\r\n    this.setState({ array: array });\r\n\r\n    // console.log(\"array was reset - jao\");\r\n  };\r\n\r\n  handleClick = () => {\r\n    let decide = this.state.toSort;\r\n    if (this.state.toSort === false) {\r\n      decide = true;\r\n    } else {\r\n      decide = false;\r\n    }\r\n    // console.log(this.state.toSort);\r\n\r\n    const newIntervalId = setInterval(() => {\r\n      this.setState((prevState) => {\r\n        return {\r\n          ...prevState,\r\n          frameNumber: prevState.frameNumber + 1,\r\n        };\r\n      });\r\n    }, 0.00000000000000000000000000000001);\r\n\r\n    this.setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        intervalId: newIntervalId,\r\n      };\r\n    });\r\n\r\n    this.setState({ toSort: decide });\r\n  };\r\n\r\n  handleGenerate() {\r\n    this.resetArray();\r\n  }\r\n\r\n  handleChange(event, value) {\r\n    if (typeof value === \"number\") {\r\n      this.setState({ arraySize: value });\r\n    }\r\n    this.resetArray();\r\n    // console.log(this.state.arraySize);\r\n  }\r\n\r\n  componentWillReceiveProps(nextState) {\r\n    if (nextState.toSort !== this.state.toSort) {\r\n      this.setState({ toSort: nextState.toSort });\r\n    }\r\n  }\r\n\r\n  handleDragStop() {\r\n    this.resetArray();\r\n    this.props.update(this.state.arraySize);\r\n  }\r\n\r\n  //   // handleChange = (event, value) => this.setState({ arraySize: value });\r\n  //   handleDragStop = () => this.props.update(this.state.arraySize);\r\n\r\n  //   handleChange = (event, value) => {\r\n  //     if (typeof value === \"number\") {\r\n  //       this.setState({ arraySize: value });\r\n  //     }\r\n  //   };\r\n\r\n  // tick() {\r\n  //   this.setState((state) => ({ frameNumber: this.state.frameNumber + 1 }));\r\n  // }\r\n\r\n  render() {\r\n    let arrSize = this.state.arraySize;\r\n    let array = [];\r\n    let frames = animation(this.state.array);\r\n    let valueList = [];\r\n    let individualFrame = [];\r\n    let renderList = [0];\r\n    let Frames = [];\r\n\r\n    for (let i = 0; i < frames.length; i++) {\r\n      Frames = frames.slice();\r\n      individualFrame = Frames[i];\r\n\r\n      for (let j = 0; j < individualFrame.length; j++) {\r\n        valueList[j] = individualFrame[j][1];\r\n      }\r\n      renderList[i] = valueList.slice();\r\n    }\r\n\r\n    if (this.state.frameNumber === renderList.length) {\r\n      this.resetAll();\r\n\r\n      console.log(\"frameNumber === render list .length\");\r\n\r\n      return (\r\n        <div className=\"mainDIV\">\r\n          <Box sx={{ width: 100, height: 600 }}>\r\n            <Stack spacing={0.5} direction=\"row\" className=\"visualizer\">\r\n              {array.map((value, idx) => (\r\n                <Box\r\n                  key={idx}\r\n                  sx={{\r\n                    borderRadius: 2,\r\n                    width: 10,\r\n                    height: value,\r\n                    backgroundColor: \"primary.dark\",\r\n                    \"&:hover\": {\r\n                      backgroundColor: \"primary.main\",\r\n                      opacity: [0.9, 0.8, 0.7],\r\n                    },\r\n                  }}\r\n                >\r\n                  {value}\r\n                </Box>\r\n              ))}\r\n            </Stack>\r\n          </Box>\r\n          <Button variant=\"contained\" onClick={this.handleClick}>\r\n            SORT\r\n          </Button>\r\n          <Button\r\n            className=\"generateButton\"\r\n            variant=\"contained\"\r\n            onClick={this.handleGenerate}\r\n          >\r\n            GENERATE NEW ARRAY\r\n          </Button>\r\n          <Box sx={{ width: 300 }}>\r\n            <Slider\r\n              className=\"slider\"\r\n              defaultValue={arrSize}\r\n              value={arrSize}\r\n              step={5}\r\n              marks\r\n              min={5}\r\n              max={72}\r\n              valueLabelDisplay=\"auto\"\r\n              aria-label=\"Array Size\"\r\n              onChange={this.handleChange}\r\n              onDragStop={this.handleDragStop}\r\n              onChangeCommited={this.handleChange}\r\n            ></Slider>\r\n          </Box>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // console.log(\"render\");\r\n    // let array = [];\r\n    frames = [];\r\n    // console.log(renderList.length);\r\n    // console.log(this.state.frameNumber);\r\n    // let arrSize = this.state.arraySize;\r\n\r\n    if (this.state.toSort === false) {\r\n      array = this.state.array;\r\n\r\n      return (\r\n        <div className=\"mainDIV\">\r\n          <Box sx={{ width: 100, height: 600 }}>\r\n            <Stack spacing={0.5} direction=\"row\" className=\"visualizer\">\r\n              {array.map((value, idx) => (\r\n                <Box\r\n                  key={idx}\r\n                  sx={{\r\n                    borderRadius: 2,\r\n                    width: 10,\r\n                    height: value,\r\n                    backgroundColor: \"primary.dark\",\r\n                    \"&:hover\": {\r\n                      backgroundColor: \"primary.main\",\r\n                      opacity: [0.9, 0.8, 0.7],\r\n                    },\r\n                  }}\r\n                >\r\n                  *\r\n                </Box>\r\n              ))}\r\n            </Stack>\r\n          </Box>\r\n          <Button variant=\"contained\" onClick={this.handleClick}>\r\n            SORT\r\n          </Button>\r\n          <Button\r\n            className=\"generateButton\"\r\n            variant=\"contained\"\r\n            onClick={this.handleGenerate}\r\n          >\r\n            GENERATE NEW ARRAY\r\n          </Button>\r\n          <Box sx={{ width: 300 }}>\r\n            <Slider\r\n              className=\"slider\"\r\n              defaultValue={arrSize}\r\n              value={arrSize}\r\n              step={5}\r\n              marks\r\n              min={5}\r\n              max={72}\r\n              valueLabelDisplay=\"auto\"\r\n              aria-label=\"Array Size\"\r\n              onChange={this.handleChange}\r\n              onDragStop={this.handleDragStop}\r\n              onChangeCommited={this.handleChange}\r\n            ></Slider>\r\n          </Box>\r\n        </div>\r\n      );\r\n    } else {\r\n      frames = animation(this.state.array);\r\n      // console.log(frames);\r\n      // console.log(this.state.array);\r\n      // let array = this.state.array;\r\n\r\n      // let boolList = [];\r\n      // let valueList = [];\r\n      // let frame = [];\r\n      // let subValueList = [];\r\n      // let elements = [];\r\n      // for (let x = 0; x < frames.length; x++) {\r\n      //   frame = frames[x];\r\n      //   let i = 0;\r\n      //   for (i; i < frame.length; i++) {\r\n      //     subValueList[i] = frame[i][1];\r\n      //   }\r\n      //   for (let j = 0; j < frames.length; j++) {\r\n      //     valueList[j] = subValueList;\r\n      //   }\r\n      // }\r\n\r\n      let valueList = [];\r\n      let individualFrame = [];\r\n      let renderList = [];\r\n      let Frames = [];\r\n\r\n      for (let i = 0; i < frames.length; i++) {\r\n        Frames = frames.slice();\r\n        individualFrame = Frames[i];\r\n\r\n        for (let j = 0; j < individualFrame.length; j++) {\r\n          valueList[j] = individualFrame[j][1];\r\n        }\r\n        renderList[i] = valueList.slice();\r\n      }\r\n      // console.log(renderList);\r\n      // console.log(this.state.frameNumber);\r\n\r\n      //RENDERING\r\n      // let index = this.state.frameNumber;\r\n      // array = renderList[index];\r\n      // console.log(array + \"arrayedd\");\r\n\r\n      array = renderList[this.state.frameNumber];\r\n\r\n      return (\r\n        <div className=\"animatedDiv\">\r\n          <Box sx={{ width: 100, height: 600 }}>\r\n            <Stack spacing={0.5} direction=\"row\" className=\"visualizer\">\r\n              {array.map((value, idx) => (\r\n                <Box\r\n                  key={idx}\r\n                  sx={{\r\n                    borderRadius: 2,\r\n                    width: 10,\r\n                    height: value,\r\n                    backgroundColor: \"primary.dark\",\r\n                    \"&:hover\": {\r\n                      backgroundColor: \"primary.main\",\r\n                      opacity: [0.9, 0.8, 0.7],\r\n                    },\r\n                  }}\r\n                >\r\n                  *\r\n                </Box>\r\n              ))}\r\n            </Stack>\r\n          </Box>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction selectionSort(inputArr) {\r\n  let n = inputArr.length;\r\n  for (let i = 0; i < n; i++) {\r\n    // Finding the smallest number in the subarray\r\n    let min = i;\r\n    for (let j = i + 1; j < n; j++) {\r\n      if (inputArr[j] < inputArr[min]) {\r\n        min = j;\r\n      }\r\n    }\r\n    if (min !== i) {\r\n      // Swapping the elements\r\n      let tmp = inputArr[i];\r\n      inputArr[i] = inputArr[min];\r\n      inputArr[min] = tmp;\r\n    }\r\n  }\r\n  return inputArr;\r\n}\r\n","import React from \"react\";\r\nimport Visualizer from \"./visualizer/Visualizer\";\r\nexport default class Main extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"main\">\r\n                <Visualizer></Visualizer>\r\n                </div>\r\n        )\r\n    }\r\n}","import './App.css';\nimport Main from \"./Main\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main></Main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}